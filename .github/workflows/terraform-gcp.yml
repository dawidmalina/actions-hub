name: "Terraform"

on:
  # define reusable section
  workflow_call:
    inputs:
      product:
        required: true
        type: string

env:
  TERRAFORM_VERSION: 1.4.3

jobs:
  prepare:
    name: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed environments(s)
        id: changes-as-json
        uses: dawidmalina/actions-hub/wrapped-changed-directories@main
        with:
          dir_names_max_depth: "3"
          files: |
            **/*.tf
    outputs:
      all_changed_files: ${{ steps.changes-as-json.outputs.all_changed_files }}
      any_changed: ${{ steps.changes-as-json.outputs.any_changed }}

  terraform:
    name: plan-apply
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.any_changed == 'true'
    needs: prepare
    strategy:
      matrix:
        dir: ${{ fromJson(needs.prepare.outputs.all_changed_files) }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.dir }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # TODO maybe switch to this approach
      # - id: auth
      #   name: Authenticate to Google Cloud
      #   uses: google-github-actions/auth@v1
      #   with:
      #     create_credentials_file: true
      #     workload_identity_provider: <write what you got from terraform output>
      #     service_account: <write what you got from terraform output>
      - name: Expose variables
        id: vars
        run: |
          echo "cloud=$( echo ${{ matrix.dir }} |cut -d'/' -f1 )" >> "$GITHUB_OUTPUT"
          echo "environment=$( echo ${{ matrix.dir }} |cut -d'/' -f2 )" >> "$GITHUB_OUTPUT"
          echo "region=$( echo ${{ matrix.dir }} |cut -d'/' -f3 )" >> "$GITHUB_OUTPUT"

      - name: Expose secrets
        id: secrets
        run: |
          token=${{ format('terraform_{0}_{1}_sa_key', inputs.product, steps.vars.outputs.environment) }}
          echo "key=${token^^}" >> "$GITHUB_OUTPUT"
          
          echo "TEST=${token^^}" >> "$GITHUB_ENV"
          
          echo "TEST_AAA=${{ format('terraform_{0}_{1}_sa_key', inputs.product, steps.vars.outputs.environment) }}" >> "$GITHUB_ENV"

      - name: Test secrets
        env:
          TEST_1: ${{ secrets[steps.secrets.key] }}
          TEST_2: ${{ secrets[env.TEST] }}
          TEST_3: ${{ secrets.TERRAFORM_ASTRATO_GLOBAL_SA_KEY }}
          TEST_4: ${{ secrets[env.TEST_AAA] }}
        run: |
          printenv |grep TEST

#       - name: Authenticate to Google Cloud
#         id: auth
#         uses: google-github-actions/auth@v1
#         with:
#           credentials_json: ${{ secrets[steps.secrets.outputs.key] }}

      # Install the preferred version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # Check if terraform code is formatted
      - name: Terraform Fmt
        if: github.event.pull_request.merged != true && github.event.pull_request.state != 'closed' || failure()
        id: fmt
        run: |
          terraform fmt -check

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        if: always()
        id: init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets[steps.secrets.outputs.key] }}
        run: |
          terraform init

      # Security scan terraform code
      - name: Terraform Security
        if: github.event.pull_request.merged != true && github.event.pull_request.state != 'closed' || failure()
        id: security
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ matrix.dir }}
          soft_fail: false

      # Validate terraform code
      - name: Terraform Validate
        if: github.event.pull_request.merged != true && github.event.pull_request.state != 'closed' || failure()
        id: validate
        env:
          GOOGLE_CREDENTIALS: ${{ secrets[steps.secrets.outputs.key] }}
        run: |
          terraform validate -no-color

      # Run a terraform plan for pull requests only
      - name: Terraform Plan
        if: github.event.pull_request.merged != true && github.event.pull_request.state != 'closed' || failure()
        id: plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets[steps.secrets.outputs.key] }}
        run: |
          terraform plan -no-color -out tfplan

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          terraform show -no-color tfplan |grep -E 'Plan:|No changes' |sed '1{/^$/d}' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "tf_plan<<EOF" >> $GITHUB_OUTPUT
          terraform show -no-color tfplan |sed '1{/^$/d}' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Save plan to artifacts
      - name: Save Plan
        if: github.event.pull_request.merged != true && github.event.pull_request.state != 'closed' || failure()
        id: save-plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ matrix.dir }}/tfplan
          # if-no-files-found: ignore

      # Add a comment to pull requests with plan results
      - name: Add Plan Comment
        if: github.event.pull_request.merged != true && github.event.pull_request.state != 'closed' || failure()
        id: plan-comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Terraform Plan Result

            - environment: **`${{ steps.vars.outputs.environment }}`**
            - region (scope): **`${{ steps.vars.outputs.region }}`**

            :ship: Terraform code modifications included in this pull request result in the following changes:

            ```
            ${{ steps.plan.outputs.summary }}
            ```

            ### Quality Standard Report:

            | Quality Check  | Status |
            | ------------- | ------------- |
            | Terraform Format and Style  | `${{ steps.fmt.outcome }}` |
            | Terraform Initialization | `${{ steps.init.outcome }}` |
            | Terraform Validation | `${{ steps.validate.outcome }}` |
            | Terraform Security | `${{ steps.security.outcome }}` |
            | Terraform Plan | `${{ steps.plan.outcome }}` |

            <details><summary>Show Plan (click)</summary>

            ```terraform
            ${{ steps.plan.outputs.tf_plan }}
            ```
            </details>

            *Pusher: @${{ github.actor }}, Working Directory: `${{ matrix.dir }}`, Cloud Provider: `${{ steps.vars.outputs.cloud }}`*

      # Download saved plan from artifacts
      - name: Download Terraform Plan
        if: github.event.pull_request.merged == true # && github.event.review.state == 'approved'
        id: download-plan
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr: ${{ github.event.pull_request.number }}
          name: tfplan
          path: ${{ matrix.dir }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.event.pull_request.merged == true # && github.event.review.state == 'approved'
        id: apply
        env:
          GOOGLE_CREDENTIALS: ${{ secrets[steps.secrets.outputs.key] }}
        run: |
          terraform apply -auto-approve -input=false -no-color tfplan

      # Add a comment to pull requests with apply results
      - name: Add Apply Comment
        if: github.event.pull_request.merged == true # && github.event.review.state == 'approved'
        id: apply-comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Terraform Apply Result

            - environment: **`${{ steps.vars.outputs.environment }}`**
            - region (scope): **`${{ steps.vars.outputs.region }}`**

            :rocket: Terraform code modifications contained in this pull request has been applied!!!

            <details><summary>Show Apply Output (click)</summary>

            ```terraform
            ${{ steps.apply.outputs.stdout }}
            ```
            </details>

            *Pusher: @${{ github.actor }}, Working Directory: `${{ matrix.dir }}`, Cloud Provider: `${{ steps.vars.outputs.cloud }}`*
