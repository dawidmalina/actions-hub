name: "Terraform"

on:
  # define reusable section
  workflow_call:
    inputs:
      project_id:
        required: true
        type: string
    secrets:
      GOOGLE_CREDENTIALS:
        required: true

env:
  TERRAFORM_VERSION: 1.4.3

jobs:
  prepare:
    name: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed environments(s)
        id: changes-as-json
        uses: dawidmalina/actions-hub/wrapped-changed-directories@main
        with:
          dir_names_max_depth: "3"
          files: |
            **/*.tf
    outputs:
      all_changed_files: ${{ steps.changes-as-json.outputs.all_changed_files }}
      any_changed: ${{ steps.changes-as-json.outputs.any_changed }}

  terraform:
    name: "Terraform"
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.any_changed == 'true'
    needs: prepare
    strategy:
      matrix:
        dir: ${{ fromJson(needs.prepare.outputs.all_changed_files) }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.dir }}

    steps:
      # Make sure GitHUb Actions runner is monitored (secured)
      - name: Harden Runner
        uses: step-security/harden-runner@v2.1.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # TODO switch to this approach
      # - id: 'auth'
      #   name: 'Authenticate to Google Cloud'
      #   uses: google-github-actions/auth@v0.7.0
      #   with:
      #     create_credentials_file: 'true'
      #     workload_identity_provider: <write what you got from terraform output>
      #     service_account: <write what you got from terrafrom output>

      # Install the preferred version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Fmt
        if: github.event.pull_request.merged != true
        id: fmt
        run: |
          terraform fmt -check

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ inputs.project_id }}
        run: |
          terraform init

      - name: Terraform Security
        if: github.event.pull_request.merged != true
        id: security
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true

      - name: Terraform Validate
        if: github.event.pull_request.merged != true
        id: validate
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ inputs.project_id }}
        run: |
          terraform validate -no-color

      # Run a terraform plan for pull requests only
      - name: Terraform Plan
        id: plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ inputs.project_id }}
        run: |
          terraform plan -no-color -out tfplan

          # echo 'tfplan=<<EOF' >> $GITHUB_OUTPUT
          # terraform show -no-color tfplan |tr -d '\n' >> $GITHUB_OUTPUT
          # echo 'EOF' >> $GITHUB_OUTPUT

          # echo "summary=$( terraform show -no-color tfplan |grep -E 'Plan:|No changes' |tr -d '\n' )" >> $GITHUB_OUTPUT

          # echo summary=$( terraform show -no-color tfplan |grep -E 'Plan:|No changes' |tr -d '\n' )
          # echo tfplan=$( terraform show -no-color tfplan |tr -d '\n' )

          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Save plan to artifacts
      - name: Save Plan
        id: save-plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan

      # Add a comment to pull requests with plan results
      - name: Add Plan Comment
        if: github.event.pull_request.merged != true
        id: plan-comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `Environment: ${{ matrix.dir }}\n
            \`\`\`\n
            ${{ steps.plan.outputs.summary }}
            \`\`\`
            #### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            #### Terraform Security üõ°Ô∏è \`${{ steps.security.outcome }}\`
            <details><summary>Validation Output</summary>\n
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>\n
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>\n
            \`\`\`\n
            ${{ steps.plan.outputs.summary }}
            \`\`\`
            </details>\n
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ matrix.dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Download saved plan from artifacts
      - name: Download Terraform Plan
        if: github.event.pull_request.merged == true && github.event.review.state == 'approved'
        id: download-plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan

      # On push to main, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.event.pull_request.merged == true && github.event.review.state == 'approved'
        id: apply
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ inputs.project_id }}
        run: |
          terraform apply -auto-approve -input=false -no-color tfplan

      - name: Add Apply Comment
        if: github.event.pull_request.merged == true && github.event.review.state == 'approved'
        id: apply-comment
        uses: actions/github-script@v6
        with:
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Apply üìñ \`${{ steps.apply.outcome }}\`
            <details><summary>Show Apply</summary>\n
            \`\`\`\n
            ${{ steps.apply.outputs.stdout }}
            \`\`\`
            </details>\n
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ matrix.dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
